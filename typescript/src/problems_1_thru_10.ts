import { range } from 'fp-ts/NonEmptyArray'
import * as utils from './utils'

export function problem001(): number {
    // If we list all the natural numbers below 10 that are multiples of 3 or 5, 
    // we get 3, 5, 6 and 9. The sum of these multiples is 23.
    // Find the sum of all the multiples of 3 or 5 below 1000.

    return range(1,999)
        .filter((i) => {return i%3 == 0 || i%5 == 0})
        .reduce((total, current) => {return total + current}, 0)
}

export function problem002(): number {
    /*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not 
    exceed four million, find the sum of the even-valued terms.
    */
   let total = 0
   for(let f of utils.generateFibonacciNumbers()) {
        if(f % 2 == 0) {
            total += f
        }
        if(f > 4_000_000) {
            break
        }
   }
   return total

}

export function problem003(): number {
    // The prime factors of 13195 are 5, 7, 13 and 29.
    // What is the largest prime factor of the number 600851475143 ?
    
    let factorization = utils.primeFactorization(600851475143)
    let largestFactor = Math.max(...factorization.map(({factor, power}) => factor))
    return largestFactor
}

export function problem004(): number {
    // A palindromic number reads the same both ways. 
    // The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
    // Find the largest palindrome made from the product of two 3-digit numbers.

    function isPalindrome(n: number): boolean {
        let N = n.toString()
        let N_reverse = N.split("").reverse().join("")
        return N == N_reverse
    }

    let largestSoFar = 0
    for(let i = 1; i < 1000; i++) {
        for(let j = 1; j <= i; j++) { // only test the lower triangular region of the iXj matrix, where j <= i
            if(isPalindrome(i*j) && i*j >= largestSoFar) {
                largestSoFar = i*j
            }
        }
    }
    return largestSoFar
}

export function problem005(): number {
    // 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    // What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

    // We can solve this one analytically:

    // Let our answer be an integer N with prime factorization p1^e1 * p2^e2 * ... = (p1*p1*...) * (p2*p2*...) * ...
    // For N to evenly divide all the numbers from 1 to 20, its prime factorization must contain factors that can be
    // used to construct all the numbers from 1 to 20. The primes themselves will be the primes below 20 (2,3,5,7,11,13,17,19).
    // N is therefore N = 2^e1 * 3^e2 * 5^e3 * 7^e4 * 11^e5 * 13^e6 * 17^e7 * 19^e8, and our task then is simply to figure out the
    // smallest set of exponents [e1, ..., e8] that allow us to construct 2-20 using the factors.
    // Visually we can do this using the grid below. The columns are the 8 prime factors below 20. The rows are the prime factorizations
    // of the numbers from 1 to 20, where the entries in the grid are the power of each given prime factor.
    // If we take the maximum value of each column, that gives us our powers for the prime factors of N.
    
    //   Powers of prime factors required to
    //   generate all the numbers from 2 to 20
    //
    //             Prime Factors below 20
    //          2  3   5   7   11  13  17  19
    // Number
    //   2      1
    //   3         1
    //   4      2
    //   5             1
    //   6      1  1    
    //   7                 1
    //   8      3
    //   9         2
    //  10      1       1 
    //  11                     1
    //  12      2  1
    //  13                         1
    //  14      1          1
    //  15         1   1
    //  16      4
    //  17                              1
    //  18      1  2
    //  19                                  1
    //  20      2      1
    //  ----------------------------------------
    // col max: 4  2   1   1    1   1   1   1
    
    // => N = 2^4 * 3^2 * 5^1 * 7^1 * 11^1 * 13^1 * 17^1 * 19^1
    //      = (2*2*2*2)*(3*3)*5*7*11*13*17*19 
    //      = 232792560
    return 232792560
}

export function problem006(): number {
    // The sum of the squares of the first ten natural numbers is 1^2 + 2^2 + ... + 10^2 = 385,
    // The square of the sum of the first ten natural numbers is (1+2+...+10)^2 = 55^2 = 3025,
    // Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
    // Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

    
    const sum_of_squares = 100 * (100 + 1) * (2*100 + 1) / 6 // formula for sum of squares n(n+1)(2n+1)/6
    const square_of_sum = Math.pow((100 * (100 + 1) / 2),2) // formula for sum n(n+1)/2
    return square_of_sum - sum_of_squares
}

export function problem007(): number {
    // By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    // What is the 10 001st prime number?

    let primes = utils.primesUpTo(1_000_000) // lets make the rather safe assumption the 10001st prime is below 1 million
    return primes[10000] // 1st prime is at index 0, 2nd at index 1, ..., 10001st at index 10000
}

export function problem008(): number {
    // The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
    // 73167176531330624919225119674426574742355349194934
    // 96983520312774506326239578318016984801869478851843
    // 85861560789112949495459501737958331952853208805511
    // 12540698747158523863050715693290963295227443043557
    // 66896648950445244523161731856403098711121722383113
    // 62229893423380308135336276614282806444486645238749
    // 30358907296290491560440772390713810515859307960866
    // 70172427121883998797908792274921901699720888093776
    // 65727333001053367881220235421809751254540594752243
    // 52584907711670556013604839586446706324415722155397
    // 53697817977846174064955149290862569321978468622482
    // 83972241375657056057490261407972968652414535100474
    // 82166370484403199890008895243450658541227588666881
    // 16427171479924442928230863465674813919123162824586
    // 17866458359124566529476545682848912883142607690042
    // 24219022671055626321111109370544217506941658960408
    // 07198403850962455444362981230987879927244284909188
    // 84580156166097919133875499200524063689912560717606
    // 05886116467109405077541002256983155200055935729725
    // 71636269561882670428252483600823257530420752963450
    // Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
    // What is the value of this product?

    const A = [
        [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,],
        [9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,],
        [8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,],
        [1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,],
        [6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,],
        [6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,],
        [3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,],
        [7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,],
        [6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,],
        [5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,],
        [5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,],
        [8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,],
        [8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,],
        [1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,],
        [1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,],
        [2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,],
        [0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,],
        [8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,],
        [0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,],
        [7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0,],
    ].reduce((acc, arr) => acc.concat(arr))

    let largestProductSoFar = 0
    for(let i = 0; i < A.length; i++) {
        let j = i + 13
        let prod = A.slice(i,j).reduce((acc,elem) => acc * elem)
        if(prod >= largestProductSoFar) {
            largestProductSoFar = prod
        }
    }

    return largestProductSoFar
}

export function problem009(): number {
    // A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2
    // For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

    // There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    // Find the product abc.

    let output = 0
    loop_c:
        for(let c = 1; c < 1000; c++){
            for(let b = 1; b < c; b++) {
                for(let a = 1; a < b; a++) {
                    if(a*a + b*b == c*c && a + b + c == 1000){
                        output = a*b*c
                        break loop_c
                    }
                }
            }
        }
    return output
}

export function problem010(): number {
    // The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    // Find the sum of all the primes below two million.

    return utils.primesUpTo(2_000_000).reduce((total, i) => total += i, 0)
}