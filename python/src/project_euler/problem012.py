# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

from project_euler.utils.number_theory import prime_factorization_by_trial_division

def main():
    # to do this we'll rely on 2 key facts:
    #   - The n'th triangle number is given by n*(n+1)/2
    #   - The number of divisors of an integer n is the product of the powers in the prime factorization plus 1
    #     (i.e. if prime factorization for n is prod(p_i ^ e_i), then the number of divisors is prod(e_i + 1)
    # TODO: This could be sped up with more optimizations
    n = 1
    while True:
        nth_triangle_number = int(n * (n+1) / 2)
        n_factors = 1
        for exponent in prime_factorization_by_trial_division(nth_triangle_number).values():
            n_factors *= exponent + 1
        if n_factors > 500:
            return nth_triangle_number
        n += 1
